<?php
/**
 * @file
 * Main module file for INCIL Hole Puncher.
 *
 * This module provides a really basic mechanism to 
 * keep the site closed except for a few select pages.  
 * This is not a sustainable way to manage access.  
 * Turn off when the site needs to be public.
 */

/**
 * Impelements hook_help().
 */
function incil_hole_puncher_help($path, $arg) {
  $output = '';

  if ($path == 'admin/help#incil_hole_puncher') {
    $output .= '<p>' . t('This module provides a really basic mechanism to keep the site closed except for a few select pages.  This is not a sustainable way to manage access.  Turn off when the site needs to be public.')  . '</p>';
  }
  
  return $output;
}

/**
 * Impelements hook_boot().
 */
function incil_hole_puncher_boot() {
  // Hook init does not run on cached pages.
  global $user;
  
  // For some reasons drush does not appreciate the
  // user check and the goto.  The following is a
  // work around.
  if (function_exists('drush_verify_cli') && drush_verify_cli()) {
    return;
  }

  // Default to deny access.
  $deny = TRUE;

  // Check if the person is logged in
  if ($user->uid > 0) {
    $deny = FALSE;
  }
  else {
    // Check if certain pages.
    $holes = incil_hole_puncher_get_holes();
    if (incil_hole_puncher_match_path($_GET['q'], $holes)) {
      $deny = FALSE;
    }
  }
  
  // Should we deny.  drupal_access_denied() and drupal_goto()
  // are not available, so we have to be a little more direct.
  if ($deny) {
    variable_get('front_page');
    $url = incil_hole_puncher_rough_url('user', array());
    header('Location: ' . $url, TRUE, 307);
    // We should do this, but its not available
    // drupal_exit($url);
  }
}

/**
 * Implements hook_permission().
 */
function incil_hole_puncher_permission() {
  return array(
    'administer incil hole punch' => array(
      'title' => t('Administer Hole Punch'),
      'description' => t('Allows a user to configure holes to punch out for access.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function incil_hole_puncher_menu() {
  $items = array();
  
  $items['admin/config/people/incil_hole_punch'] = array(
    'title' => 'Hole Puncher',
    'description' => 'Provides a really basic mechanism to keep the site closed except for a few select pages.  This is not a sustainable way to manage access.  Turn off when the site needs to be public.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('incil_hole_puncher_admin'),
    'access arguments' => array('administer incil hole punch'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  return $items;
}

/**
 * Admin form
 */
function incil_hole_puncher_admin($form, &$form_state) {
  $form['incil_hole_punch_holes'] = array(
    '#type' => 'textarea',
    '#title' => t('Holes'),
    '#description' => t('Aliased paths to allow anonymous users access to.  Put each path on a new line.  For instance, webforms.  Path aliased are not handled here, so put in both or just the alias.  You can also use "*" for wildcard matching.'),
    '#default_value' => variable_get('incil_hole_punch_holes', ''),
  );
  return system_settings_form($form);
}

/**
 * Get Holes
 */
function incil_hole_puncher_get_holes() {
  // Default is being able to login.
  $holes = array(
    'user',
    'user/register',
    'user/password',
    'user/login',
  );
  $holes = implode("\r\n", $holes);
  $holes .= "\r\n" . variable_get('incil_hole_punch_holes', '');

  return $holes;
}

/**
 * Create rough Drupal path.  Taken from url();
 */
function incil_hole_puncher_rough_url($path, $options = array()) {
  global $base_url, $base_secure_url, $base_insecure_url;

  // The base_url might be rewritten from the language rewrite in domain mode.
  if (!isset($options['base_url'])) {
    if (isset($options['https']) && variable_get('https', FALSE)) {
      if ($options['https'] === TRUE) {
        $options['base_url'] = $base_secure_url;
        $options['absolute'] = TRUE;
      }
      elseif ($options['https'] === FALSE) {
        $options['base_url'] = $base_insecure_url;
        $options['absolute'] = TRUE;
      }
    }
    else {
      $options['base_url'] = $base_url;
    }
  }
  
  return $options['base_url'] . '/' . $path;
}

/**
 * Custom match path.  Take from drupal_match_path().
 */
function incil_hole_puncher_match_path($path, $patterns) {
  $regexps = array();

  if (!isset($regexps[$patterns])) {
    // Convert path settings to a regular expression.
    // Therefore replace newlines with a logical or, /* with asterisks and the <front> with the frontpage.
    $to_replace = array(
      '/(\r\n?|\n)/', // newlines
      '/\\\\\*/', // asterisks
      '/(^|\|)\\\\<front\\\\>($|\|)/', // <front>
    );
    $replacements = array(
      '|',
      '.*',
      '\1' . preg_quote(variable_get('site_frontpage', 'node'), '/') . '\2',
    );
    $patterns_quoted = preg_quote($patterns, '/');
    $regexps[$patterns] = '/^(' . preg_replace($to_replace, $replacements, $patterns_quoted) . ')$/';
  }
  return (bool) preg_match($regexps[$patterns], $path);
}